// Check out https://treecalcul.us/live/?example=demo-serialize-anything to
// interactively convert arbitrary programs into various formats.
// For efficient dag representations, copy the output of the "DAG (out)" tab
// in any output preview section at https://treecalcul.us/live/.

export const id_ternary = '21100';

// From "Typed Program Analysis without Encodings" (Jay, PEPM 2025).
export const equal_ternary =
  `212121202120112110102121200212002120112002120
   112002121200212002120102120021200212120021200
   212010211010212010211010202120102110102020211
   010202120112110102121200212002120112002120112
   002121200212002120102120021200212120021200212
   010211010212010211010202120102110102020211010
   202120112220221020202110102020202110102121200
   212002120112002120112012021101021201121101021
   201021101020202020202110102120112011201220211
   010202021101021212002120021201120021201120021
   201120112002120112011200212011201120112002120
   112011201120021212002120021201021200212002120
   112002120112002120112011200212011201120021201
   120112010212120021200212011200212011200212011
   201021201121101021201021101020202110102021201
   120102121200212002120112002120112002120112010
   212011211010212010211010202021101020202020202
   021101010211010`.split(/\s/).join('');

export const size_ternary =
  `212121201121211002110010202120212011201120212
   120112121100211001020212021201221000212011222
   011020112010010212011212011212110021100101021
   212001211002121202121202120002120102120002010
   212011202120212000101120212021200010211002120
   112120112121100211001010200`.split(/\s/).join('');

export const succ_dag = `0 △ △
1 △ 0
2 △ 1
3 2 △
4 △ 3
5 △ 4
6 5 3
7 △ 6
8 △ 7
9 0 8
10 △ 9
11 △ 10
12 11 0
13 △ 12
14 1 △
15 △ 14
16 15 △
17 △ 16
18 0 17
19 △ 18
20 0 1
21 0 0
22 △ 21
23 △ 22
24 0 23
25 △ 20
26 25 24
27 △ 26
28 27 △
29 △ 28
30 △ 29
31 0 30
32 △ 31
33 △ 32
34 33 0
35 △ 19
36 35 34
37 0 36
38 △ 37
39 △ 13
40 0 39
41 △ 40
42 △ 41
43 42 0
44 △ 38
45 44 43
46 0 45
47 39 46
47`;

export const bench_recursive_fib_ternary = `
  21212021212011212110021100102021202121202120002120112021212120112000202021212
  01121211002110010202120212012210002121202121202121202120002120102120002010212
  02120112120112000101020011201020110212011212011212110021100101020021202120112
  12021202120001021202120112110010212120112121100211001020212021201200212021212
  12011200020202200212011201002001120110212011212011212110021100101010212120212
  02120001021200021202121202120002120102120002010212120212000102021212011212110
  02110010202120212012002120212121201120002020220021201120100200112011021201121
  20112121100211001010202210200202002120112120112121100211001010212120112121100
  21100102021202120120021202121212011200020202200212011201002001120110212011212
  0112121100211001010200`.split(/\s/).join('');

export const bench_linear_fib_ternary = `
  21202200102121212011212110021100102021202120122110002120112011201200212120212
  12021200021201021200020102120112021212021200021201021200020102120112011202120
  21200010212011201120212021200010212120212021200010212021200010202120112021212
  01121211002110010202120212012002120212121201120002020220021201120100200112011
  02120112120112121100211001010020212011021212021212021200021201021200020102120
  11202121201121211002110010202120212012220202100002121202120212000102120212120
  21200021201021200020102120112021202120001021201120120011202120112120212021200
  01001020212011212012002222210200202121200221020002110002022212120022102000211
  00202102010001021201121201121211002110010102121201121211002110010202120212011
  21202120002220212120112121100211001020212021201200212011212021202120001021200
  10102120112120112121100211001010021201021201221212011212110021100102021202120
  12002120112120212021200010212002102001021201121201121211002110010100212011201
  02120112000212012211000212021201121202120002120112021212011200020001011201021
  20112120112121100211001010200212011212011212110021100101020221002100`.split(/\s/).join('');

export const bench_alloc_and_identity_ternary = `
  21202121100201021212021200021201120212011211001021212021212021200021201021200
  02010212011202121202120002120102120002010212011212021212021200021201021200020
  10212110020212120212120212000212010212000201021212011212110021100102021202120
  21212021200021201021200020102120112012211000212011212021212021200021201021200
  02010212011202120212000102120112021202120001021212021212021212021200021201021
  20002010212021201121201120001010200020211002120112011202121202120001021100212
  120212000212010212000201021201121201121211002110010102001020020212000`.split(/\s/).join('');
